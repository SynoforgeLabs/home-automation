#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <EEPROM.h>

// Forward declarations
void handleTurnOn(String requestId);
void handleTurnOff(String requestId);
void handleGetStatus(String requestId);
void sendRegistration();
void sendStatus(String requestId);
void sendCommandResponse(String command, String requestId, bool success, String error);

// Replace with your network credentials
const char* ssid = "SLT-Fiber-EYcM6-2.4G";  // Network SSID (name)
const char* password = "aqua1483";  // Network password

// MQTT Configuration
const char* mqtt_server = "broker.hivemq.com";  // Free public MQTT broker for testing
const int mqtt_port = 1883;
const char* deviceId = "esp32-light-controller";
const char* deviceName = "Living Room Light";

// MQTT Topics
const char* status_topic = "devices/esp32-light-controller/status";
const char* heartbeat_topic = "devices/esp32-light-controller/heartbeat";
const char* command_topic = "devices/esp32-light-controller/commands";
const char* response_topic = "devices/esp32-light-controller/responses";

// MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);

// Variables to store the current state of the light (ON/OFF)
String lightState = "off";

// Assign the light relay to a GPIO pin
const int LIGHT_RELAY_PIN = 4;  // GPIO 4 for the light relay

// Variable to enable or disable state saving
const bool saveState = true;

// EEPROM address to store the state
const int eepromSize = 1;

// Timing variables
unsigned long lastHeartbeat = 0;
unsigned long lastReconnect = 0;
const unsigned long heartbeatInterval = 15000; // 15 seconds
const unsigned long reconnectInterval = 5000;  // 5 seconds

// Connect to WiFi
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// MQTT message callback
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  // Parse JSON command
  DynamicJsonDocument doc(256);
  DeserializationError error = deserializeJson(doc, message);
  
  if (error) {
    Serial.print("Failed to parse JSON: ");
    Serial.println(error.c_str());
    return;
  }

  String command = doc["command"];
  String requestId = doc["requestId"];

  if (command == "turn_on") {
    handleTurnOn(requestId);
  } else if (command == "turn_off") {
    handleTurnOff(requestId);
  } else if (command == "get_status") {
    handleGetStatus(requestId);
  } else {
    Serial.println("Unknown command: " + command);
  }
}

// Reconnect to MQTT broker
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      
      // Subscribe to command topic
      client.subscribe(command_topic);
      Serial.print("Subscribed to: ");
      Serial.println(command_topic);
      
      // Send device registration message
      sendRegistration();
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

// Send device registration to MQTT
void sendRegistration() {
  DynamicJsonDocument doc(512);
  doc["deviceId"] = deviceId;
  doc["name"] = deviceName;
  doc["ip"] = WiFi.localIP().toString();
  doc["status"] = lightState;
  doc["timestamp"] = millis();
  doc["type"] = "registration";
  
  String message;
  serializeJson(doc, message);
  
  client.publish(heartbeat_topic, message.c_str());
  Serial.println("Registration sent via MQTT");
}

// Send heartbeat via MQTT
void sendHeartbeat() {
  if (!client.connected()) {
    return;
  }
  
  DynamicJsonDocument doc(512);
  doc["deviceId"] = deviceId;
  doc["name"] = deviceName;
  doc["ip"] = WiFi.localIP().toString();
  doc["status"] = lightState;
  doc["timestamp"] = millis();
  doc["type"] = "heartbeat";
  doc["relay_pin"] = LIGHT_RELAY_PIN;
  
  String message;
  serializeJson(doc, message);
  
  if (client.publish(heartbeat_topic, message.c_str())) {
    Serial.println("Heartbeat sent via MQTT");
  } else {
    Serial.println("Failed to send heartbeat");
  }
}

// Send status via MQTT
void sendStatus(String requestId = "") {
  DynamicJsonDocument doc(512);
  doc["deviceId"] = deviceId;
  doc["status"] = lightState;
  doc["relay_pin"] = LIGHT_RELAY_PIN;
  doc["ip_address"] = WiFi.localIP().toString();
  doc["timestamp"] = millis();
  doc["type"] = "status";
  
  if (requestId != "") {
    doc["requestId"] = requestId;
  }
  
  String message;
  serializeJson(doc, message);
  
  const char* topic = (requestId != "") ? response_topic : status_topic;
  
  if (client.publish(topic, message.c_str())) {
    Serial.println("Status sent via MQTT to " + String(topic));
  } else {
    Serial.println("Failed to send status");
  }
}

// Send command response via MQTT
void sendCommandResponse(String command, String requestId, bool success, String error = "") {
  DynamicJsonDocument doc(512);
  doc["deviceId"] = deviceId;
  doc["command"] = command;
  doc["requestId"] = requestId;
  doc["success"] = success;
  doc["status"] = lightState;
  doc["timestamp"] = millis();
  
  if (error != "") {
    doc["error"] = error;
  }
  
  String message;
  serializeJson(doc, message);
  
  if (client.publish(response_topic, message.c_str())) {
    Serial.println("Command response sent via MQTT");
  } else {
    Serial.println("Failed to send command response");
  }
}

// Handle turn on command
void handleTurnOn(String requestId) {
  Serial.println("MQTT Command: Light turning ON");
  lightState = "on";
  digitalWrite(LIGHT_RELAY_PIN, HIGH);  // HIGH turns relay ON
  
  if (saveState) {
    EEPROM.write(0, 1);
    EEPROM.commit();
  }
  
  sendCommandResponse("turn_on", requestId, true, "");
  sendStatus(""); // Also broadcast status update
  Serial.println("Light turned ON via MQTT");
}

// Handle turn off command
void handleTurnOff(String requestId) {
  Serial.println("MQTT Command: Light turning OFF");
  lightState = "off";
  digitalWrite(LIGHT_RELAY_PIN, LOW); // LOW turns relay OFF
  
  if (saveState) {
    EEPROM.write(0, 0);
    EEPROM.commit();
  }
  
  sendCommandResponse("turn_off", requestId, true, "");
  sendStatus(""); // Also broadcast status update
  Serial.println("Light turned OFF via MQTT");
}

// Handle get status command
void handleGetStatus(String requestId) {
  Serial.println("MQTT Command: Get status");
  sendStatus(requestId);
}

void setup() {
  Serial.begin(115200);
  
  // Initialize EEPROM
  if (saveState) {
    EEPROM.begin(eepromSize);
  }

  // Initialize the GPIO pin for the light relay as output
  pinMode(LIGHT_RELAY_PIN, OUTPUT);
  
  // Load saved state from EEPROM
  if (saveState) {
    lightState = EEPROM.read(0) == 1 ? "on" : "off";
  }

  // Set initial relay state
  digitalWrite(LIGHT_RELAY_PIN, lightState == "on" ? HIGH : LOW);
  
  Serial.print("Light initial state: ");
  Serial.println(lightState);

  // Connect to Wi-Fi
  setup_wifi();
  
  // Setup MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  Serial.println("ESP32 MQTT Light Controller started");
  Serial.println("MQTT Topics:");
  Serial.println("  Subscribe: " + String(command_topic));
  Serial.println("  Publish Status: " + String(status_topic));
  Serial.println("  Publish Heartbeat: " + String(heartbeat_topic));
  Serial.println("  Publish Responses: " + String(response_topic));
}

void loop() {
  // Ensure MQTT connection
  if (!client.connected()) {
    unsigned long now = millis();
    if (now - lastReconnect > reconnectInterval) {
      lastReconnect = now;
      reconnect();
    }
  } else {
    client.loop();
    
    // Send periodic heartbeat
    unsigned long now = millis();
    if (now - lastHeartbeat > heartbeatInterval) {
      sendHeartbeat();
      lastHeartbeat = now;
    }
  }
  
  // Small delay to prevent overwhelming the CPU
  delay(100);
}